// Make sure that mandatory/default features continue to exist.

if d.Get("name").(string) == "rbacrolebindingactuation" {
  getUrl, err := tpgresource.ReplaceVars(d, config, "{{"{{"}}GKEHub2BasePath{{"}}"}}projects/{{"{{"}}project{{"}}"}}/locations/{{"{{"}}location{{"}}"}}/features/{{"{{"}}name{{"}}"}}")
  if err != nil {
  	return err
  }
  _, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
  	Config:    config,
  	Method:    "GET",
  	Project:   billingProject,
  	RawURL:    getUrl,
  	UserAgent: userAgent,
  	Headers:   headers,
  })
  
  if err == nil {
  	// Fleet feature exists as expected
  	log.Printf("[DEBUG] Fleet feature already exists %s", d.Get("name"))
  	id, err := tpgresource.ReplaceVars(d, config, "{{$.GetIdFormat}}")
    if err != nil {
      return fmt.Errorf("Error constructing id: %s", err)
    }
    d.SetId(id)

    if v, ok := d.GetOk("spec.0.rbacrolebindingactuation.0.allowed_custom_roles"); ok {
      // if the allowed custom roles are empty, we do not need to clear them.
	log.Printf("[DEBUG] Fleet feature custom roles found %v", v)
	if v == []string{} {
	  return nil
	}
	    spec := d.Get("spec")
	    log.Printf("[DEBUG] the spec looks like %v", spec)
	    rrbActuationFeature := spec.([]interface{})[0].(map[string]interface{})["rbacrolebindingactuation"]
	    rrbActuationFeature.([]interface{})[0].(map[string]interface{})["allowed_custom_roles"] = []string{}
	    log.Printf("[DEBUG] the spec after the update looks like %v", spec)
	    
	    if err := d.Set("spec", spec); err != nil {
				return err
			}
	    return resourceGKEHub2FeatureUpdate(d, meta)
    }
	log.Printf("[DEBUG] Fleet feature custom roles not found")
    return nil
  }
}
